package com.airportapp.util;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DBInitializer {

    /**
     * Вызывайте в начале старта приложения
     */
    public static void initialize() {
        try (Connection conn = DbUtil.getConnection();
             Statement stmt  = conn.createStatement()) {

            // 1) Таблица airport
            if (!tableExists(stmt, "AIRPORT")) {
                stmt.execute("""
                    CREATE TABLE AIRPORT (
                      ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      NAME VARCHAR(100)  NOT NULL,
                      CITY VARCHAR(100)  NOT NULL,
                      COUNTRY VARCHAR(100) NOT NULL,
                      IATA_CODE CHAR(3)   UNIQUE NOT NULL
                    )
                """);
            }

            // 2) Таблица aircraft
            if (!tableExists(stmt, "AIRCRAFT")) {
                stmt.execute("""
                    CREATE TABLE AIRCRAFT (
                      ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      MODEL VARCHAR(100)       NOT NULL,
                      MANUFACTURER VARCHAR(100),
                      CAPACITY INTEGER CHECK (CAPACITY > 0)
                    )
                """);
            }

            // 3) Таблица flight
            if (!tableExists(stmt, "FLIGHT")) {
                stmt.execute("""
                    CREATE TABLE FLIGHT (
                      ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      FLIGHT_NUMBER VARCHAR(10) UNIQUE NOT NULL,
                      AIRCRAFT_ID INTEGER NOT NULL REFERENCES AIRCRAFT(ID),
                      ORIGIN_AIRPORT_ID INTEGER NOT NULL REFERENCES AIRPORT(ID),
                      DEST_AIRPORT_ID   INTEGER NOT NULL REFERENCES AIRPORT(ID),
                      DEPARTURE_TIME TIMESTAMP NOT NULL,
                      ARRIVAL_TIME   TIMESTAMP NOT NULL
                    )
                """);
            }

            // 4) Таблица passenger
            if (!tableExists(stmt, "PASSENGER")) {
                stmt.execute("""
                    CREATE TABLE PASSENGER (
                      ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      FIRST_NAME VARCHAR(50)  NOT NULL,
                      LAST_NAME  VARCHAR(50)  NOT NULL,
                      PASSPORT_NUMBER VARCHAR(20) UNIQUE NOT NULL,
                      DATE_OF_BIRTH DATE
                    )
                """);
            }

            // 5) Таблица ticket
            if (!tableExists(stmt, "TICKET")) {
                stmt.execute("""
                    CREATE TABLE TICKET (
                      ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      FLIGHT_ID    INTEGER NOT NULL REFERENCES FLIGHT(ID),
                      PASSENGER_ID INTEGER NOT NULL REFERENCES PASSENGER(ID),
                      SEAT_NUMBER  VARCHAR(5),
                      PRICE        DECIMAL(8,2) CHECK (PRICE >= 0)
                    )
                """);
            }

            // Опционально: seed initial data
            seedAirports(stmt);
            seedAircraft(stmt);

            System.out.println("Database initialized successfully in Firebird.");
        } catch (Exception ex) {
            throw new RuntimeException("Error initializing database", ex);
        }
    }

    /**
     * Проверка наличия таблицы в Firebird через системную RDB$RELATIONS
     */
    private static boolean tableExists(Statement stmt, String tableName) throws SQLException {
        String check = "SELECT COUNT(*) "
                + "FROM RDB$RELATIONS "
                + "WHERE RDB$RELATION_NAME = '" + tableName.toUpperCase() + "'";
        try (ResultSet rs = stmt.executeQuery(check)) {
            rs.next();
            return rs.getInt(1) > 0;
        }
    }

    /**
     * Пример «засева» нескольких аэропортов
     */
    private static void seedAirports(Statement stmt) throws SQLException {
        String[][] airports = {
                {"SVO", "Sheremetyevo", "Moscow", "Russia"},
                {"LHR", "Heathrow",    "London", "United Kingdom"}
        };
        for (var a : airports) {
            String code = a[0];
            // проверяем, есть ли уже запись
            try (ResultSet rs = stmt.executeQuery(
                    "SELECT ID FROM AIRPORT WHERE IATA_CODE = '" + code + "'")) {
                if (!rs.next()) {
                    stmt.executeUpdate(String.format(
                            "INSERT INTO AIRPORT (IATA_CODE, NAME, CITY, COUNTRY) " +
                                    "VALUES ('%s','%s','%s','%s')",
                            code, a[1], a[2], a[3]
                    ));
                }
            }
        }
    }

    /**
     * Пример «засева» нескольких самолётов
     */
    private static void seedAircraft(Statement stmt) throws SQLException {
        String[][] aircrafts = {
                {"Boeing 737", "Boeing", "160"},
                {"Airbus A320", "Airbus", "150"}
        };
        for (var ac : aircrafts) {
            String model = ac[0];
            try (ResultSet rs = stmt.executeQuery(
                    "SELECT ID FROM AIRCRAFT WHERE MODEL = '" + model + "'")) {
                if (!rs.next()) {
                    stmt.executeUpdate(String.format(
                            "INSERT INTO AIRCRAFT (MODEL, MANUFACTURER, CAPACITY) " +
                                    "VALUES ('%s','%s',%s)",
                            ac[0], ac[1], ac[2]
                    ));
                }
            }
        }
    }
}